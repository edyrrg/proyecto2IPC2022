/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.ryuk.gui;

import com.ryuk.file.GestorFilePlayer;
import com.ryuk.file.GestorFilePtDamas;
import com.ryuk.file.GestorFilePtHanoi;
import com.ryuk.hanoi.Hanoi;
import com.ryuk.partidas.PartidaDamas;
import com.ryuk.partidas.PartidaHanoi;
import com.ryuk.util.Constantes;
import com.ryuk.util.Utils;
import com.ryuk.player.Player;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author edyrr
 */
public class UIMenu extends javax.swing.JFrame implements Constantes {

    private GestorFilePtHanoi gestorFilePtHanoi;
    private GestorFilePlayer gestorFilePlayer;
    private GestorFilePtDamas gestorFilePtDamas;
    private ArrayList<Player> listPlayers;
    private ArrayList<PartidaDamas> listDamas;
    private ArrayList<PartidaHanoi> listHanoi;

    /**
     * Creates new form UIMenu
     */
    public UIMenu() {
        initComponents();
        //lista de arreglos del proyecto
        this.listPlayers = new ArrayList<>();
        this.listDamas = new ArrayList<>();
        this.listHanoi = new ArrayList<>();
        ImageIcon icon = new ImageIcon(ICON_UI_IMAGE);
        this.setIconImage(icon.getImage());
        this.setVisible(true);
        //gestores de archivo de la data
        this.gestorFilePlayer = new GestorFilePlayer();
        this.gestorFilePtDamas = new GestorFilePtDamas();
        this.gestorFilePtHanoi = new GestorFilePtHanoi();
        CargaListaJugadores();
        CargarArchivosPartidasDamas();
        CargarArchivoPartidasHanoi();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        bgPanel = new javax.swing.JPanel();
        btnDamas = new javax.swing.JButton();
        btnHanoi = new javax.swing.JButton();
        btnCrearJugador = new javax.swing.JButton();
        Reportes = new javax.swing.JButton();
        lblTitulo = new javax.swing.JLabel();
        btnListaJugadores = new javax.swing.JButton();
        lblBackGround = new javax.swing.JLabel();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Proyecto 2 - Juegos");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(800, 625));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        bgPanel.setPreferredSize(new java.awt.Dimension(850, 625));
        bgPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnDamas.setBackground(new java.awt.Color(7, 7, 60));
        btnDamas.setFont(new java.awt.Font("Lato Semibold", 1, 18)); // NOI18N
        btnDamas.setForeground(new java.awt.Color(255, 255, 255));
        btnDamas.setText("Damas Chinas");
        btnDamas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDamasActionPerformed(evt);
            }
        });
        bgPanel.add(btnDamas, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 180, 200, 60));

        btnHanoi.setBackground(new java.awt.Color(7, 7, 60));
        btnHanoi.setFont(new java.awt.Font("Lato Semibold", 1, 18)); // NOI18N
        btnHanoi.setForeground(new java.awt.Color(255, 255, 255));
        btnHanoi.setText("Torres de Hanoi");
        btnHanoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHanoiActionPerformed(evt);
            }
        });
        bgPanel.add(btnHanoi, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 180, 200, 60));

        btnCrearJugador.setBackground(new java.awt.Color(7, 7, 60));
        btnCrearJugador.setFont(new java.awt.Font("Lato Semibold", 1, 18)); // NOI18N
        btnCrearJugador.setForeground(new java.awt.Color(255, 255, 255));
        btnCrearJugador.setText("Crear Jugador");
        btnCrearJugador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearJugadorActionPerformed(evt);
            }
        });
        bgPanel.add(btnCrearJugador, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 330, 200, 60));

        Reportes.setBackground(new java.awt.Color(7, 7, 60));
        Reportes.setFont(new java.awt.Font("Lato Semibold", 1, 18)); // NOI18N
        Reportes.setForeground(new java.awt.Color(255, 255, 255));
        Reportes.setText("Reportes");
        Reportes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReportesActionPerformed(evt);
            }
        });
        bgPanel.add(Reportes, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 460, 200, 60));

        lblTitulo.setFont(new java.awt.Font("Lato Semibold", 1, 48)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(255, 255, 255));
        lblTitulo.setText("Menu Principal");
        bgPanel.add(lblTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 30, -1, -1));

        btnListaJugadores.setBackground(new java.awt.Color(7, 7, 60));
        btnListaJugadores.setFont(new java.awt.Font("Lato Semibold", 1, 18)); // NOI18N
        btnListaJugadores.setForeground(new java.awt.Color(255, 255, 255));
        btnListaJugadores.setText("Lista de Jugadores");
        btnListaJugadores.setToolTipText("");
        btnListaJugadores.setPreferredSize(new java.awt.Dimension(210, 30));
        btnListaJugadores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListaJugadoresActionPerformed(evt);
            }
        });
        bgPanel.add(btnListaJugadores, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 330, 210, 60));

        lblBackGround.setIcon(new javax.swing.ImageIcon("D:\\proyectos_u\\proyecto2\\resource\\BackGroundR.jpg")); // NOI18N
        bgPanel.add(lblBackGround, new org.netbeans.lib.awtextra.AbsoluteConstraints(-180, 0, 990, 625));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bgPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 810, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bgPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnDamasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDamasActionPerformed

        if (listPlayers.isEmpty()) {
            JOptionPane.showMessageDialog(this, "\t\tNo existen jugadores aun...\nPorfavor cree un jugador para poder continuar!",
                    "Alerta", JOptionPane.WARNING_MESSAGE);
            int confirm = JOptionPane.showConfirmDialog(this, "Â¿Desea crear un jugador?",
                    "Alerta", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if (confirm == 0) {
                if (!crearNuevoJugador()) {
                    return;
                }
            }
            if (confirm == 1 || confirm == -1) {
                return;
            }
        }
        new UITipoPartida(listPlayers, listDamas, this);
        this.dispose();
    }//GEN-LAST:event_btnDamasActionPerformed

    /**
     * Crea un nuevo jugador
     *
     * @return verdadero si es creado el jugador de lo contrario falso
     */
    private boolean crearNuevoJugador() {
        String name = Utils.checkName("Ingrese el nombre del jugador", "Nuevo Jugador", this);
        return Utils.validatePlayer(name, listPlayers, this);
    }

    private void btnCrearJugadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearJugadorActionPerformed
        // TODO add your handling code here:
        new UIUserManage(listPlayers, this);
        this.dispose();
    }//GEN-LAST:event_btnCrearJugadorActionPerformed

    private void btnListaJugadoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListaJugadoresActionPerformed
        // TODO add your handling code here:
        new UIListaJugadores(listPlayers, this);
        this.dispose();
    }//GEN-LAST:event_btnListaJugadoresActionPerformed

    private void ReportesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReportesActionPerformed
            // TODO add your handling code here:
            new UIReportes(listDamas, listHanoi, listPlayers, this);
            this.dispose();
    }//GEN-LAST:event_ReportesActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        EscribirListaJugadores();
        EscribirListaPartidas();
    }//GEN-LAST:event_formWindowClosing

    private void btnHanoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHanoiActionPerformed
        // TODO add your handling code here:
        new UIPartidaManageHanoi(listPlayers, this, listHanoi);
        this.dispose();
    }//GEN-LAST:event_btnHanoiActionPerformed

    /**
     * Otorga la visibilidad y focus de ventana padre cuando se cierran las
     * ventanas hijas
     */
    public void setFocusMain() {
        this.requestFocus();
        this.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Reportes;
    private javax.swing.JPanel bgPanel;
    private javax.swing.JButton btnCrearJugador;
    private javax.swing.JButton btnDamas;
    private javax.swing.JButton btnHanoi;
    private javax.swing.JButton btnListaJugadores;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel lblBackGround;
    private javax.swing.JLabel lblTitulo;
    // End of variables declaration//GEN-END:variables

    /**
     * Lee y carga la lista de jugadores guardada en el archivo listPlayer.list
     */
    private void CargaListaJugadores() {
        try {
            if (!gestorFilePlayer.cargarArchivo()) {
                return;
            }
            listPlayers = gestorFilePlayer.leerLista();
            retomarConteoIdJugadores();
        } catch (IOException ex) {
            System.err.println(ex + " aqui");
        } catch (ClassNotFoundException ex) {
            System.err.println("Clase no encontrada D:");
        }
    }

    /**
     * Lee y carga la lista de partidas de damas
     */
    private void CargarArchivosPartidasDamas() {
        try {
            if (!gestorFilePtDamas.cargarArchivo()) {
                return;
            }
            listDamas = gestorFilePtDamas.leerLista();
            retomarConteoIdPartidaDamas();
        } catch (IOException ex) {
            System.err.println(ex + " aqui");
        } catch (ClassNotFoundException ex) {
            System.err.println("Clase no encontrada D:");
        }
    }

    /**
     * Lee y carga la lista de partidas de hanoi
     */
    private void CargarArchivoPartidasHanoi() {
        try {
            if (!gestorFilePtHanoi.cargarArchivo()) {
                return;
            }
            listHanoi = gestorFilePtHanoi.leerLista();
            retomarConteoIdPartidaHanoi();
        } catch (IOException ex) {
            System.err.println(ex + " aqui");
        } catch (ClassNotFoundException ex) {
            System.err.println("Clase no encontrada D:");
        }
    }

    /**
     * Escribe la lista actualizada de los jugadores en el archivo
     * listPlayers.list incluso si esta no se actualiza
     */
    private void EscribirListaJugadores() {
        try {
            gestorFilePlayer.escribirLista(listPlayers);
        } catch (IOException ex) {
            System.err.println(ex);
        }
    }

    /**
     * Escribe la lista actualizada de las partidas en el archivo listDamas y
     * listHanoi incluso si esta no se actualiza
     */
    private void EscribirListaPartidas() {
        try {
            gestorFilePtDamas.escribirLista(listDamas);
            gestorFilePtHanoi.escribirLista(listHanoi);
        } catch (IOException ex) {
            System.err.println(ex);
        }
    }

    /**
     * Retoma el conteo del Id para no tener Id's duplicados
     */
    private void retomarConteoIdJugadores() {
        Player.setCantidadJugadores(listPlayers.size());
    }

    /**
     * Retoma el conteo del Id para no tener Id's duplicados
     */
    private void retomarConteoIdPartidaDamas() {
        PartidaDamas.setContadorPartida(listDamas.size());
    }

    /**
     * Retoma el conteo del Id para no tener Id's duplicados
     */
    private void retomarConteoIdPartidaHanoi() {
        PartidaHanoi.setContadorPartida(listHanoi.size());
    }
}
