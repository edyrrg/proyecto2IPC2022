/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.ryuk.gui;

import com.ryuk.util.Constantes;
import static com.ryuk.util.Constantes.ICON_UI_IMAGE;
import com.ryuk.damas_chinas.Damas;
import com.ryuk.partidas.PartidaDamas;
import com.ryuk.player.Player;
import java.awt.GridLayout;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import sun.awt.WindowClosingListener;

/**
 *
 * @author edyrr
 */
public class UIPartidaManageDamas extends javax.swing.JFrame implements Constantes {

    private final ArrayList<PartidaDamas> listDamas;
    private final ArrayList<Player> listaJugadores;
    private UIMenu windowMain;
    private int seleccionPlayerUno;
    private int seleccionPlayerDos;
    private int contadorSeleccionJugadores;
    private boolean salir;

    /**
     * Constructor cuando la partida sea Jugador contra Jugador
     *
     * @param _listaJugadores
     * @param _windowMain
     */
    public UIPartidaManageDamas(ArrayList<Player> _listaJugadores, ArrayList<PartidaDamas> _listDamas, UIMenu _windowMain) {
        initComponents();
        ImageIcon icon = new ImageIcon(ICON_UI_IMAGE);
        this.listaJugadores = _listaJugadores;
        this.listDamas = _listDamas;
        this.windowMain = _windowMain;
        this.setIconImage(icon.getImage());
        cargarListaJugadores();
        tablaJugadores.setEnabled(false);
        //this.salir = false;
        this.setVisible(true);
    }

    /**
     * Contructor para cuando la partida sea contra la Maquina
     *
     * @param _listaJugadores
     * @param _windowMain
     * @param player
     */
    public UIPartidaManageDamas(ArrayList<Player> _listaJugadores, ArrayList<PartidaDamas> _listDamas, UIMenu _windowMain, Player _player) {
        initComponents();
        ImageIcon icon = new ImageIcon(ICON_UI_IMAGE);
        this.setIconImage(icon.getImage());
        this.listDamas = _listDamas;
        this.listaJugadores = _listaJugadores;
        this.windowMain = _windowMain;
        cargarListaJugadores();
        tablaJugadores.setEnabled(false);
        this.setVisible(true);
    }

    /**
     * Carga la lista de los jugadores al JTable para poder seleccionar a los
     * jugadores deseados por el usuario
     */
    public void cargarListaJugadores() {
        DefaultTableModel model = (DefaultTableModel) tablaJugadores.getModel();
        model.getDataVector().removeAllElements();
        for (Player jugador : listaJugadores) {
            model.addRow(new Object[]{jugador.getId(), jugador.getNombre()});
        }
        tablaJugadores.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgPanel = new javax.swing.JPanel();
        btnCargarPartida = new javax.swing.JButton();
        btnNewParty = new javax.swing.JButton();
        spPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaJugadores = new javax.swing.JTable();
        lblJugadorUno = new javax.swing.JLabel();
        lblJugadorDos = new javax.swing.JLabel();
        btnIniciarPartida = new javax.swing.JButton();
        lblBackGround = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Damas Chinas");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        bgPanel.setForeground(new java.awt.Color(51, 51, 51));
        bgPanel.setEnabled(false);
        bgPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnCargarPartida.setBackground(new java.awt.Color(7, 7, 60));
        btnCargarPartida.setFont(new java.awt.Font("Lato Semibold", 1, 18)); // NOI18N
        btnCargarPartida.setForeground(new java.awt.Color(255, 255, 255));
        btnCargarPartida.setText("Cargar Partida");
        btnCargarPartida.setPreferredSize(new java.awt.Dimension(175, 50));
        btnCargarPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarPartidaActionPerformed(evt);
            }
        });
        bgPanel.add(btnCargarPartida, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, -1, -1));

        btnNewParty.setBackground(new java.awt.Color(7, 7, 60));
        btnNewParty.setFont(new java.awt.Font("Lato Semibold", 1, 18)); // NOI18N
        btnNewParty.setForeground(new java.awt.Color(255, 255, 255));
        btnNewParty.setText("Nueva Partida");
        btnNewParty.setPreferredSize(new java.awt.Dimension(175, 50));
        btnNewParty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewPartyActionPerformed(evt);
            }
        });
        bgPanel.add(btnNewParty, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        spPanel.setBackground(new java.awt.Color(0, 0, 0));

        tablaJugadores.setFont(new java.awt.Font("Lato Semibold", 1, 18)); // NOI18N
        tablaJugadores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaJugadores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaJugadoresMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaJugadores);

        lblJugadorUno.setFont(new java.awt.Font("Lato Semibold", 1, 18)); // NOI18N
        lblJugadorUno.setForeground(new java.awt.Color(255, 255, 255));
        lblJugadorUno.setText("Jugador Uno: ");

        lblJugadorDos.setFont(new java.awt.Font("Lato Semibold", 1, 18)); // NOI18N
        lblJugadorDos.setForeground(new java.awt.Color(255, 255, 255));
        lblJugadorDos.setText("Jugador Dos:");

        btnIniciarPartida.setBackground(new java.awt.Color(7, 7, 60));
        btnIniciarPartida.setFont(new java.awt.Font("Lato Semibold", 1, 18)); // NOI18N
        btnIniciarPartida.setForeground(new java.awt.Color(255, 255, 255));
        btnIniciarPartida.setText("Iniciar Partida");
        btnIniciarPartida.setEnabled(false);
        btnIniciarPartida.setPreferredSize(new java.awt.Dimension(175, 50));
        btnIniciarPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarPartidaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout spPanelLayout = new javax.swing.GroupLayout(spPanel);
        spPanel.setLayout(spPanelLayout);
        spPanelLayout.setHorizontalGroup(
            spPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, spPanelLayout.createSequentialGroup()
                .addGap(0, 21, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
            .addGroup(spPanelLayout.createSequentialGroup()
                .addGroup(spPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(spPanelLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(spPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblJugadorUno)
                            .addComponent(lblJugadorDos)))
                    .addGroup(spPanelLayout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(btnIniciarPartida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        spPanelLayout.setVerticalGroup(
            spPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblJugadorUno)
                .addGap(18, 18, 18)
                .addComponent(lblJugadorDos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addComponent(btnIniciarPartida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        bgPanel.add(spPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 20, 460, 440));

        lblBackGround.setIcon(new javax.swing.ImageIcon("D:\\proyectos_u\\proyecto2\\resource\\BackGroundR3.jpg")); // NOI18N
        bgPanel.add(lblBackGround, new org.netbeans.lib.awtextra.AbsoluteConstraints(-50, 0, 780, 490));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bgPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bgPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        if (!salir) {
            this.setFocusMe();
        }
    }//GEN-LAST:event_formWindowClosed

    private void btnNewPartyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewPartyActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Seleccione los jugadores con los que\n desea empezar la partida...",
                "Damas Chinas", JOptionPane.INFORMATION_MESSAGE);
        tablaJugadores.setEnabled(true);
        btnNewParty.setEnabled(false);
        btnCargarPartida.setEnabled(false);
        btnIniciarPartida.setEnabled(true);
    }//GEN-LAST:event_btnNewPartyActionPerformed

    private void tablaJugadoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaJugadoresMouseClicked
        // TODO add your handling code here:
        elegirJugadorBy();
    }//GEN-LAST:event_tablaJugadoresMouseClicked


    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        int confirm = JOptionPane.showConfirmDialog(this, "¿Esta seguro de regresar al menu principal?",
                "Advertencia", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (confirm == 1) {
            salir = false;
            return;
        }
        if (confirm == -1) {
            salir = false;
            return;
        }
        salir = true;
        windowMain.setFocusMain();

    }//GEN-LAST:event_formWindowClosing

    private void btnIniciarPartidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarPartidaActionPerformed
        // TODO add your handling code here:
        if (contadorSeleccionJugadores < MAXIMO_JUGADORES_PARTIDA) {
            JOptionPane.showMessageDialog(this, "No se han seleccionado todos los jugadores!",
                    "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Player tmpJugadorUno = listaJugadores.get(seleccionPlayerUno);
        Player tmpJugadorDos = listaJugadores.get(seleccionPlayerDos);
        Damas tmpDamas = new Damas(new GridLayout(MAX_CASILLAS, MAX_CASILLAS));
        PartidaDamas tmpPartida = new PartidaDamas(tmpDamas, tmpJugadorUno, tmpJugadorDos);
        new UIDamasChinas(tmpPartida, listDamas, windowMain);
        salir = true;
        this.dispose();
    }//GEN-LAST:event_btnIniciarPartidaActionPerformed

    private void btnCargarPartidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarPartidaActionPerformed
        // TODO add your handling code here:
        new UICargarPartidaDamas(listDamas, this,windowMain);
        salir = true;
        this.dispose();
    }//GEN-LAST:event_btnCargarPartidaActionPerformed
    
    public void setFocusMe(){
        this.requestFocus();
        this.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bgPanel;
    private javax.swing.JButton btnCargarPartida;
    private javax.swing.JButton btnIniciarPartida;
    private javax.swing.JButton btnNewParty;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBackGround;
    private javax.swing.JLabel lblJugadorDos;
    private javax.swing.JLabel lblJugadorUno;
    private javax.swing.JPanel spPanel;
    private javax.swing.JTable tablaJugadores;
    // End of variables declaration//GEN-END:variables

    private void elegirJugadorBy() {
        try {
            switch (contadorSeleccionJugadores) {
                case 0:
                    elegirPrimerJugador();
                    break;
                case 1:
                    elegirSegundoJugador();
                    break;
                case 2:
                    JOptionPane.showMessageDialog(this, "Se han elegido todo los jugadores!",
                            "Advertencia", JOptionPane.WARNING_MESSAGE);
                    break;
                default:
                    throw new AssertionError();
            }

        } catch (IndexOutOfBoundsException e) {
            System.err.println("no apunto a nada");
        } catch (NullPointerException e) {
            System.err.println("no existo en la lista");
        }
    }

    private void elegirPrimerJugador() {
        Player player;
        int confirm;
        int tmpSeleccion = tablaJugadores.getSelectedRow();
        player = listaJugadores.get(tmpSeleccion);
        confirm = JOptionPane.showConfirmDialog(this, "¿Desea elegir a " + player.getNombre() + " ?",
                "Elegir Jugador", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
        if (confirm == 1) {
            return;
        }
        if (confirm == -1) {
            return;
        }
        seleccionPlayerUno = tmpSeleccion;
        contadorSeleccionJugadores++;
        String tmpTxt = lblJugadorUno.getText();
        lblJugadorUno.setText(tmpTxt + " "
                + listaJugadores.get(seleccionPlayerUno).getNombre());
    }

    private void elegirSegundoJugador() {
        Player player;
        int confirm;
        int tmpSeleccion = tablaJugadores.getSelectedRow();
        player = listaJugadores.get(tmpSeleccion);
        confirm = JOptionPane.showConfirmDialog(this, "¿Desea elegir a " + player.getNombre() + " ?",
                "Elegir Jugador", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
        if (confirm == 1) {
            return;
        }
        if (confirm == -1) {
            return;
        }
        if (seleccionPlayerUno == tmpSeleccion) {
            JOptionPane.showMessageDialog(this, "Este jugador ya fue elegido",
                    "Damas Chinas", JOptionPane.WARNING_MESSAGE);
            return;
        }
        seleccionPlayerDos = tmpSeleccion;
        contadorSeleccionJugadores++;
        String tmpTxt = lblJugadorDos.getText();
        lblJugadorDos.setText(tmpTxt + " "
                + listaJugadores.get(seleccionPlayerDos).getNombre());
    }
}
